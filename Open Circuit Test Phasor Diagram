% Clear previous figures
clf;
figure('Position', [100, 100, 800, 800]);
hold on;
grid on;
axis equal;
title('Open Circuit Test Phasor Diagram');
xlabel('Real Axis');
ylabel('Imaginary Axis');

% Define angles in degrees
angle_Ic = 53.94;  % I_c angle now relative to I_p (0°)
angle_Im = -36.06;     % I_m is 90° to I_p
angle_Ip = 0;      % I_p as reference at 0°
angle_Vp = 53.94;      % V_p angle, can remain at 0° for simplicity

% Define magnitudes (Ic, Im, Ip in A; Vp in V)
mag_Ic = 59.330e-3;
mag_Im = 81.490e-3;
mag_Ip = 100.8e-3;
mag_Vp = 110.4;

% Convert polar to complex numbers
Ic = mag_Ic * exp(1j * deg2rad(angle_Ic));
Im = mag_Im * exp(1j * deg2rad(angle_Im));
Ip = mag_Ip * exp(1j * deg2rad(angle_Ip));
Vp = mag_Vp * exp(1j * deg2rad(angle_Vp));

% Define Vp scaling factor
Vp_scale = 0.005; % Try a smaller scale if needed
Vp_scaled = Vp * Vp_scale;

% Plot phasors
quiver(0, 0, real(Ic), imag(Ic), 0, 'b', 'LineWidth', 2, 'MaxHeadSize', 0.5);
quiver(0, 0, real(Im), imag(Im), 0, 'r', 'LineWidth', 2, 'MaxHeadSize', 0.5);
quiver(0, 0, real(Ip), imag(Ip), 0, 'm', 'LineWidth', 2, 'MaxHeadSize', 0.5);
quiver(0, 0, real(Vp_scaled), imag(Vp_scaled), 0, 'g', 'LineWidth', 2, 'MaxHeadSize', 0.5);

% Add phasor labels
text(real(Ic)*1.3, imag(Ic)*1.2, ...
    ['$I_c = 59.330 \times 10^{-3} \angle 53.94^\circ$ A'], ...
    'Color', 'b', 'Interpreter', 'latex', 'FontWeight', 'bold');

text(real(Im)*0.8, imag(Im)*1.1, ...
    ['$I_m = 81.490 \times 10^{-3} \angle -36.06^\circ$ A'], ...
    'Color', 'r', 'Interpreter', 'latex', 'FontWeight', 'bold');

text(real(Ip)*1.1, imag(Ip)*1.2, ...
    ['$I_p = 100.8 \times 10^{-3} \angle 0^\circ$ A (ref)'], ...
    'Color', 'm', 'Interpreter', 'latex', 'FontWeight', 'bold');

text(real(Vp_scaled)*1.05, imag(Vp_scaled)*1.05, ...
    ['$V_p = 110.4 \angle 53.94^\circ$ V (scaled $\times 200$)'], ...
    'Color', 'g', 'Interpreter', 'latex', 'FontWeight', 'bold');

% Add note for scaling
text(0.02, -0.08, sprintf('Note: V_p scaled by ×%.0f (1 cm = %.1f V)', Vp_scale^-1, 1/Vp_scale), ...
    'Color', 'g', 'FontSize', 9, 'FontAngle', 'italic');

% Angle arcs
draw_angle_arc = @(angle_deg, color, radius) ...
    plot(radius*cosd(linspace(0, angle_deg, 100)), ...
         radius*sind(linspace(0, angle_deg, 100)), ...
         'Color', color, 'LineWidth', 1.2, 'LineStyle', '--');

draw_angle_arc(angle_Im, 'r', 0.05);
draw_angle_arc(angle_Ic, 'b', 0.04);
draw_angle_arc(angle_Ip, 'm', 0.06);

% Angle labels
text(0.08*cosd(angle_Im/2), 0.08*sind(angle_Im/2), sprintf('%.2f°', angle_Im), 'Color', 'r', 'FontSize', 10);
text(0.08*cosd(angle_Ic/2), 0.08*sind(angle_Ic/2), sprintf('%.2f°', angle_Ic), 'Color', 'b', 'FontSize', 10);

% Add legend and adjust limits
legend('I_c', 'I_m', 'I_p (reference)', 'V_p (scaled)');
xlim([-0.1, 0.2]);
ylim([-0.1, 0.2]);
